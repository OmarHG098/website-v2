# 4GeeksAcademy Project Development Guide
**Version:** v2.0  
**Last Updated:** January 2025  
**Purpose:** Comprehensive development guide for maintainable, scalable code across all regions  

---

## 🚨 1. COMMON ERRORS TO AVOID

### 1.1 GraphQL Query Issues
**❌ CRITICAL ERROR:** Forgetting to update GraphQL queries when adding new YAML keys

```javascript
// BAD: Added job_guarantee_description to YAML but forgot GraphQL
full_time {
  description        // ✅ This exists
  // job_guarantee_description  // ❌ Missing! Component will get undefined
}

// GOOD: Always sync GraphQL with YAML structure  
full_time {
  description
  job_guarantee_description  // ✅ Added to both YAML and GraphQL
}
```

**PREVENTION CHECKLIST:**
1. ✅ Update YAML files
2. ✅ Update GraphQL queries in component
3. ✅ Update component logic to use new fields
4. ✅ Test with `npm run test`
5. ✅ Verify data appears in browser

### 1.2 Regional Logic Errors
**❌ WRONG:** Using visitor origin location instead of selected academy

```javascript
// BAD: Based on where user visited from
shouldShowJobGuarantee(session.location, info)

// GOOD: Based on selected academy in dropdown
shouldShowJobGuarantee(currentLocation, info)
```

### 1.3 YAML Structure Mismatches
**❌ COMMON MISTAKE:** Component expects nested structure but YAML is flat

```yaml
# BAD: Component expects nested but YAML is flat
job_guarantee:
  title: "Job Guarantee"
  monthly_label: "$349/month"

# GOOD: Match expected component structure
job_guarantee:
  - slug: usa_academies
    academies: ['atlanta-usa', 'chicago-usa']
    title: "Job Guarantee"
    monthly_label: "$349/month"
```

### 1.4 Language File Inconsistencies
**❌ CRITICAL:** Missing keys in one language file

```yaml
# prices_and_payment.us.yml
job_guarantee:
  title: "Job Guarantee"

# prices_and_payment.es.yml  
job_guarantee:
  # Missing title! Will break Spanish pages
```

---

## 📋 2. PROJECT CODING STANDARDS

### 2.1 Configuration-First Development
**PRINCIPLE:** Always prefer YAML configuration over hardcoded values

```javascript
// BAD: Hardcoded values
const monthlyLabel = "$349 a month or less";
const applyLink = "/us/apply";

// GOOD: YAML configuration
{getJobGuaranteeConfig(currentLocation, info)?.monthly_label}
{getRegionalCTA(session, info)?.apply_link}
```

### 2.2 Commit Message Standards
**FORMAT:** `PREFIX: Description (max 50 chars)`

**PREFIXES:**
- `ADD:` - New features, components, or files
- `UPDATE:` - Modifications to existing code/content  
- `FIX:` - Bug fixes and corrections
- `REMOVE:` - Deletions or cleanup

**EXAMPLES:**
```bash
✅ ADD: Regional job guarantee structure support
✅ UPDATE: Job guarantee locations per regions  
✅ FIX: Mobile dropdowns closing on toggle
✅ REMOVE: Obsolete payment method configs
```

### 2.3 Component Architecture Patterns
**FOLLOW:** Established patterns like `AdmissionsStaff` component

```javascript
// Standard pattern for location-based filtering
const filterByLocation = (item) => {
  const candidates = [
    session?.location?.breathecode_location_slug,
    session?.location?.meta_info?.slug, 
    session?.location?.active_campaign_location_slug,
  ].filter((s) => typeof s === "string" && s.length > 0);
  
  for (const locationSlug of candidates) {
    if (item.locations.includes(locationSlug) || item.locations.includes("all")) {
      return true;
    }
  }
  return false;
};
```

### 2.4 Testing Requirements
**MANDATORY:** Test after each step, especially YAML/GraphQL changes

```bash
# Always run before committing
npm run test

# Test specific areas after changes
npm run test:yaml    # For YAML modifications
npm run test:seo     # For meta/SEO changes
npm run test:plans   # For pricing plan changes
```

---

## 🌍 3. SCALABILITY RULES

### 3.1 Regional Design Patterns
**STRUCTURE:** Use academy-based arrays for all regional configurations

```yaml
# SCALABLE: Academy-based regional configuration
job_guarantee:
  - slug: usa_academies
    academies: ['atlanta-usa', 'chicago-usa', 'houston-usa']
    monthly_label: "$349 a month or less"
  - slug: latam_academies  
    academies: ['bogota-colombia', 'lima-peru']
    monthly_label: "Desde $349 USD al mes"
  - slug: europe_academies
    academies: ['madrid-spain', 'barcelona-spain']
    monthly_label: "Desde €299 al mes"
```

### 3.2 Currency & Messaging Support
**PLAN FOR:** Different currencies, legal requirements, and cultural messaging

```yaml
# Multi-regional pricing examples
price: "€4,750*"           # Europe (Euro)
price: "$13,499"           # USA (USD)
price: "3.040.000 CLP"     # Chile (Chilean Peso)
price: "USD $3.600"        # LATAM (USD but explicit)
```

### 3.3 Regulatory Considerations
**LOCATIONS WITH SPECIAL RULES:**
- **Europe:** GDPR compliance, VAT considerations
- **Chile:** Local currency, different job guarantee rules
- **USA:** State-specific regulations in some locations
- **LATAM:** Mixed USD/local currency preferences

### 3.4 Future Market Expansion
**DESIGN FOR:** Easy addition of new countries/regions

```javascript
// Expandable helper function
const getRegionalConfig = (location, configType) => {
  const regionMappings = {
    'usa': ['atlanta-usa', 'chicago-usa', 'houston-usa'],
    'latam': ['bogota-colombia', 'lima-peru', 'quito-ecuador'],
    'europe': ['madrid-spain', 'barcelona-spain'],
    'asia': [], // Future expansion ready
  };
  // Implementation...
};
```

---

## 📁 4. PROJECT CONVENTIONS

### 4.1 File Naming & Structure
**REQUIRED:** Consistent naming across all content files

```
✅ CORRECT NAMING:
src/data/components/prices_and_payment/
├── prices_and_payment.us.yml
└── prices_and_payment.es.yml

src/data/plans/
├── full-stack.us.yml
├── full-stack.es.yml
├── cybersecurity.us.yml 
└── cybersecurity.es.yml
```

### 4.2 Language File Synchronization
**CRITICAL:** Always update both `.us.yml` and `.es.yml` files

```yaml
# When adding new feature, update BOTH files:

# prices_and_payment.us.yml
new_feature:
  title: "New Feature"
  description: "Feature description"

# prices_and_payment.es.yml  
new_feature:
  title: "Nueva Característica"
  description: "Descripción de la característica"
```

### 4.3 Component Organization
**STANDARD:** Each component in its own folder with `index.js`

```
src/components/PricesAndPayment/
└── index.js  ✅

src/components/AdmissionsStaff/
└── index.js  ✅

❌ AVOID:
src/components/PricesAndPayment.js
src/components/PricesAndPayment/PricesAndPayment.js
```

### 4.4 GraphQL Query Patterns
**PATTERN:** Use descriptive query names and consistent structure

```javascript
const data = useStaticQuery(graphql`
  query PricesAndPaymentQuery {  // Descriptive name
    content: allPricesAndPaymentYaml {
      edges {
        node {
          fields { lang }
          // List all needed fields explicitly
          job_guarantee_locations
          job_guarantee {
            slug
            academies
            title
            monthly_label
          }
        }
      }
    }
  }
`);
```

---

## 🎓 5. 4GEEKSACADEMY CONTEXT

### 5.1 Business Model Understanding
**GLOBAL PRESENCE:** International coding bootcamp with 20+ locations
- **USA:** Atlanta, Austin, Chicago, Dallas, Houston, LA, NYC, Miami, Orlando, Tampa, Toronto
- **LATAM:** Buenos Aires, Bogotá, Caracas, Costa Rica, La Paz, Lima, Mexico City, Montevideo, Panama, Quito  
- **EUROPE:** Madrid, Barcelona, Valencia, Málaga, Berlin, Dublin, Hamburg, Munich, Lisbon, Milan, Rome

### 5.2 Pricing Strategy Variations
**DIFFERENT MODELS BY REGION:**

```yaml
# USA: Higher prices, job guarantee available
price: "$13,499"
job_guarantee_description: "Regular tuition is $12,999..."

# LATAM: USD pricing, different financing
price: "USD $3.600" 
financing: "Financing available"

# Europe: Euro pricing, different regulations
price: "€4,750*"
financing: "SEPA financing available"
```

### 5.3 Job Guarantee Program
**AVAILABILITY VARIES:** Not all locations offer job guarantee

```yaml
# Job guarantee enabled locations
job_guarantee_locations: [
  "atlanta-usa", "austin-usa", "chicago-usa", "dallas-usa",
  "houston-usa", "losangeles-usa", "newyork-usa", "toronto-canada",
  "buenosaires-argentina", "bogota-colombia", "caracas-venezuela",
  "costa-rica", "lapaz-bolivia", "lima-peru", "mexicocity-mexico",
  "montevideo-uruguay", "panamacity-panama", "quito-ecuador"
]
# NOTE: Chile and Europe excluded due to local regulations
```

### 5.4 Mobile-First Design
**PRIORITY:** Mobile experience is critical (60%+ mobile traffic)

```javascript
// Always consider mobile-first responsive design
<Div
  display="none"           // Hidden on mobile
  display_md="block"       // Shown on desktop
>
  Desktop content
</Div>

<Div
  display="block"          // Shown on mobile  
  display_md="none"        // Hidden on desktop
>
  Mobile content
</Div>
```

### 5.5 Multilingual Requirements
**SUPPORTED LANGUAGES:**
- **English (US):** Primary language for US/Canada markets
- **Spanish (ES):** Primary language for LATAM/Spain markets

**TRANSLATION GUIDELINES:**
- Maintain technical accuracy across languages
- Use informal tone ("tú" form in Spanish)
- Preserve component structure between languages
- Keep marketing messages culturally appropriate

---

## 🔧 6. DEVELOPMENT WORKFLOW

### 6.1 Step-by-Step Process
1. **📋 Plan:** Break complex changes into small steps
2. **🏗️ YAML First:** Update configuration files  
3. **🔍 GraphQL:** Update queries to match new YAML structure
4. **⚛️ Component:** Update React component logic
5. **🧪 Test:** Run `npm run test` after each step
6. **📝 Commit:** Small, focused commits with clear messages
7. **🔄 Iterate:** Repeat until feature is complete

### 6.2 Code Review Checklist
- [ ] Both `.us.yml` and `.es.yml` files updated
- [ ] GraphQL queries include all new YAML fields
- [ ] Component logic handles undefined/null values gracefully
- [ ] Regional filtering uses selected academy, not visitor origin
- [ ] All tests pass (`npm run test`)
- [ ] Commit messages follow project standards
- [ ] Mobile and desktop rendering tested

### 6.3 Debugging Guide
**COMMON DEBUG POINTS:**
1. **Data not appearing:** Check GraphQL query includes the field
2. **Regional logic broken:** Verify academy-based filtering
3. **Spanish page errors:** Check both language files have matching keys
4. **Toggle not working:** Ensure state variables are passed to child components

---

## 🚀 7. PERFORMANCE & OPTIMIZATION

### 7.1 GraphQL Optimization
**ONLY FETCH NEEDED DATA:** Don't request unused fields

```javascript
// BAD: Fetching everything
allPlansYaml {
  edges {
    node {
      full_time  // Fetches all fields
    }
  }
}

// GOOD: Explicit field selection
allPlansYaml {
  edges {
    node {
      full_time {
        slug
        academies  
        description
        price
        // Only what you need
      }
    }
  }
}
```

### 7.2 Component Rendering
**AVOID:** Unnecessary re-renders and complex calculations in render

```javascript
// BAD: Complex calculation in render
{availablePlans.filter(plan => 
  plan.academies.includes(location) && plan.price > 0
).map(plan => ...)}

// GOOD: Pre-calculate in useEffect
useEffect(() => {
  const filtered = availablePlans.filter(plan => 
    plan.academies.includes(currentLocation) && plan.price > 0
  );
  setFilteredPlans(filtered);
}, [availablePlans, currentLocation]);
```

---

## 📚 8. RESOURCES & REFERENCES

### 8.1 Key Files to Study
- `src/components/AdmissionsStaff/index.js` - Location filtering pattern
- `src/components/PricesAndPayment/index.js` - Complex regional logic
- `src/data/components/prices_and_payment/` - Regional YAML structure
- `src/test/` - Testing patterns and validation

### 8.2 External Dependencies
- **Gatsby:** Static site generation and GraphQL
- **React:** Component framework
- **Styled Components:** CSS-in-JS styling
- **React Select:** Dropdown components

### 8.3 Testing Commands
```bash
npm run test              # Full test suite
npm run develop          # Development server
npm run build            # Production build
npm run serve            # Serve built site
```

---

## ⚠️ 9. CRITICAL REMINDERS

1. **ALWAYS** update both `.us.yml` and `.es.yml` files
2. **NEVER** forget to update GraphQL queries when adding YAML keys
3. **TEST** thoroughly after YAML or GraphQL changes
4. **USE** selected academy for regional logic, not visitor origin
5. **FOLLOW** commit message conventions (PREFIX: Description)
6. **MAINTAIN** mobile-first responsive design
7. **CONSIDER** all regions when adding new features
8. **VALIDATE** with `npm run test` before committing

---

**🎯 Remember:** This is an international project serving students worldwide. Every change should work seamlessly across all regions, languages, and devices. When in doubt, follow established patterns and test thoroughly.

**📖 Version History:**
- v1.0 (2024): Initial project patterns
- v2.0 (2025): Regional refactoring and comprehensive guide